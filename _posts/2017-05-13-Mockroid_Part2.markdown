---
layout: post
title: Mockroid(Part 2)
---
<div style="text-align: justify">
After several weeks of developing Mockroid, I have to say this project takes much more efforts than I had expected. The original plan is to develop a test double framework on Android VM. Along with the process of development, the original purpose of implementing this framework has transformed and changed. This project should be suspended by two major reasons. The first reason is the misunderstanding of how test double framework works. Test double framework, like Mockito, creates an instance of target class whose return value of each method can be set by the framework without consideration of the internal logic of this method. Framework has an internal queue which stores mocked return values of a method. When a method is called, framework will check the queue to see if there is any mocked value left. If the queue is empty, then framework skips mocking and executing the real code of the method. Only the object instanced by the library has the ability to intercept method calling and return mocked value. Mockroid does not work in this way. Mockroid replaces a method instead of intercepting method calling. For instance a class named Apple with a function named getName. Mockroid replaces getName method by AndFix which changes the definition of this method in Android VM. After mocking a method by Mockroid, every instance of Apple class points to the new method without referencing the old one, even the instance is created before mocking. On the contrary, mocking of Mockito only confines within the object created by the library whose effect is much smaller and manageable. The second reason is Mockito has already launched a new library which supports object mocking in android VM in January. Then it is not a wise decision to develop a test double framework by yourself, since Mockito has more experience on it.<br/><br/>

Perhaps it is meaningless to continue this project since there is already an open source project works much better than mine. Thanks to the very nature of innovation, I happened to discover another project that grows from the idea of Mockroid. What your are looking for in the first place may not the one you find at last. Life has its way of teasing you. Mockroid has a function that replace a method of target class, the class defines the new method is compile on the fly within the android VM by Javassist. Through a series of hooking technology, class compiled on the fly can be find by the classloader, then method of target class can be replaced by the one defined in the new created class. By going through these steps, it is very likely to develop a new framework that compile Java class within the android VM instead of JVM. The traditional way of compiling Java source file is using Javac within an IDE, such as Android Studio or Eclipse. In Android platform, various build tools are required but the basic idea is similar. Both function and test codes are compiled as an apk or jar file then launched by android VM or JVM. This procedure is called static build. By adopting some Android hacking techniques, it is possible to extend class bundle of an application by loading external dex file during runtime. Therefore it is very likely to compile unit test code on the fly without the restriction of setting develop environment right.<br/><br/>

Though Javassist has user friendly APIs, it is still difficult to parse Java source code to Javassist compatible data structure. Javassist compiles a class or method by input of literal source code which means you have to extract all the necessary elements from a piece of Java source code, such as class name, method body, declared global field, imported packages. Adding a Java grammar parser may help to solve the problem, but it may takes too much time to understand how the parser works not to mention add extra modification of it. A relative simple approach is using regex to extract specific segment from source code which is easier to understand and modify. Seven regex statements are designed to extract target segments from source code, most of them works well for the moment, but further modification is still possible if unexpected source code structure is presented. For example, Javassist cannot recognised code with generic type declaration which forces you to explicitly do type casting whenever a method has generic argument or return value. As a result the on the fly compiled source code will have a lot of type casting statement. To solve this problem, static regex matching is not enough since there is a lot semantics need to be stored while matching through source code. For instance, type cast of return value depends on the declared return class type of the method. This process is called type erasure. Once again, it is not easy to develop your own type erasure module. Another possible solution is introducing a white list of function to transform specific Java source code statement. This solution only transforms the statement that matches with regex defined in white list. This a partial solution to avoid redundant type casting declaration.<br/><br/>

The original idea of Mockroid has changed dramatically. The primary purpose of developing this framework is to satisfy test double requirement on Android VM which is already done by Mockito team. Inspired by the existing android hacking and bytecode manipulating technologies, Mockroid transformed into a dynamic compiling framework. The most difficult part is extracting each segments from Java source code and pass them to Javassist. Compiling related knowledge is required to get syntax tree from source code. By the limited knowledge of compiler, I used several regex statement to extract specific parts from source code which cost less efforts and the result can be directly used by Javassist. The future of this framework is difficult to predict, and the value of this framework is difficult to measure too. There is still a lot of work needs to be done before large scale usage, but I do believe this is the innovation that my life brings to me.
</div>
