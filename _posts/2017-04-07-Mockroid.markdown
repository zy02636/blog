---
layout: post
title: Mockroid
---
The first working day after Qingming Festival is a totally disaster. I spent whole day to debug Mockriod on Tmall android application. This could be another difficult task since the development of some codes to make instrumentation test cases compatible to Atlas. It is never an easy job once you try to make your framework compatible to real world application.  Product release android application has much more sophisticated structure. Mockroid runs smoothly in demo application but fails even during its initialisation in real world application. As far as I can tell that to write a serious test framework will take you months or even years. There are too many unknown factors lie on your path to develop an industrial level test framework. Since my initial target is developing a small and flexible Test Doubles framework in Android VM, I shall stick to this plan. Before more efforts invested in this project, the truth value of it should be measured that is the work I will do in the next following workday.

After several hours coding on Thursday, though not too much code, Mockriod is compatible to Atlas now. The core problem relates to the ClassLoader of target class. Atlas has three layers of ClassLoader. On the top is BootClassLoader, next level is BaseDexClassLoader, then comes with PathClassLoader or DexClassLoader. The process of hooking is done by insert a new DexFile into DexPathList which is a declared field in BaseDexClassLoader, (perhaps not in this class, bad memory). The very solution is hooking the classloader of target class as PathClassLoader before the loading of class which is created on-the-fly. After the hooking, ClassLoader of target class should be restored to prevent unknown future issues. This should be the ending of today's work. Nevertheless, on Android 7, AndFix raises an exception which says andfix so file should be 32 bit rather than 64 bit. Mockroid runs like a charm when running its test code in Android7 device, but crashes when Mockroid got compiled as library referenced by target project. This issue should be fixed before the coming of weekend.

On Friday morning, I figured out why AndFix crashes on Android 7. Debugging information tells that Tmall android application runs in 32-bit process and loaded libandfix.so is a 64-bit library which causes unsatisfied link error. According to the specification of ARM 64-bit architecture, Multilib device runs two Zygote processes in parallel, 64-bit process and 32-bit process. When an application runs in 64-bit system, if it contains 64-bit library then it will be launched in 64-bit process or in 32-bit process when 32-bit library is found. After decompressing of application apk file and test application apk file, each library in two lib folders is examined. All library files in application folder is 32-bit, several libraries in test application is 64-bit, including arm64-v8a, mips64, x86_64. A possible reason is when a 64-bit device launches an application by instrumentation test runner, it only checks lib folder of application apk to decide running application in 32-bit or 64-bit process. In this case, all libraries in application folder are compiled as 32-bit library  then the device launches the application in 32-bit Zygote process. When application tries to load a library during the runtime, libraries in test application are examined before those in target application. As a result 64-bit library is loaded in 32-bit process which causes unsatisfied link error. Delete all 64-bit libraries in Mockroid lib folder solves this problem.

Codes written on Thursday afternoon to make Mockroid compatible with Atlas is not working. Running result shows the test process crashes which is mistakenly regarded as a successful running. Though a bit reluctant to solve this problem, I have to get it done for the sake of dignity of programmer. There are four types of ClassLoader used in Atlas, BootClassLoader, PathClassLoader, DelegateClassLoader and BundleClassLoader. PathClassLoader is used to load class packaged in classes.dex file, DelegateClassLoader serves as a router to dispatch class loading request to each BundleClassLoader. It is BundleClassLoader that needs to be hooked. However, several attempts to hook DexPath of BundleClassLoader are all in vain. Though BundleClassLoader inherits from BaseDexClassLoader, it has its own way of loading class which is quite different from the way of PathClassLoader or DexClassLoader. The common way of hooking DexPath does not work for BundleClassLoader. Moreover, it is mandatory to ensure class created on-the-fly should share the ClassLoader of target class in order to avoid weird crash. Therefore it is not an option to hook PathClassLoader. According to the source code of BundleClassLoader, classes.dex file of each bundle is stored in a field of BundleArchiveRevision, name of this field is dexFile. Now, solution seems much more straight forward, replace the value of dexFile field as the DexFile that holds classes compiled on-the-fly. Field value of dexFile will be restored after the loading of class.

It is not easy to develop an innovative library. Especially when this framework has to deal with sorts of hacking. Mockroid starts with a very simple idea which is mocking the return value of class method. It is not possible to have a neat and simple way to achieve this goal with the restriction of android VM. Thanks to various open source projects which make Mockroid possible. Before large scale usage of Mockroid, there is still a long way to go. We will never know what blocks our way to perfection only by moving on.

All right, Stephen King I have to stop here. Your recommendation of writing one thousand words on each day is so difficult. As a man who has limited talent on writing, the writing of several hundred words has already reached my upper bound. This training reminds me of my first essay as a freshman during undergraduate study. I have to keep counting how may words I have written which is exactly I am doing now. As the word count keeps going up, I may have to stop right here, because the word count of this blog has already exceeded 1000. Thank you for your time and reading.
